/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.pipeclamp.test;  
@SuppressWarnings("all")
/** A functional passport */
@org.apache.avro.specific.AvroGenerated
public class Passport extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Passport\",\"namespace\":\"com.pipeclamp.test\",\"doc\":\"A functional passport\",\"fields\":[{\"name\":\"number\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"unique identifier\",\"constraints\":[{\"function\":\"size\",\"args\":[{\"name\":\"min\",\"value\":\"1\"},{\"name\":\"max\",\"value\":\"3\"}]}]},{\"name\":\"country\",\"type\":{\"type\":\"enum\",\"name\":\"Country\",\"symbols\":[\"CAN\",\"USA\",\"MEX\",\"JAP\"]},\"doc\":\"issuing country\"},{\"name\":\"expiryDate\",\"type\":\"long\",\"doc\":\"expiration date in Unix time.\"},{\"name\":\"pages\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Page\",\"fields\":[{\"name\":\"index\",\"type\":\"int\",\"doc\":\"page number\",\"constraints\":[{\"function\":\"range\",\"args\":[{\"name\":\"min\",\"value\":\"1\"},{\"name\":\"max\",\"value\":\"100\"}]}]},{\"name\":\"contents\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"page contents\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** unique identifier */
   private java.lang.String number;
  /** issuing country */
   private com.pipeclamp.test.Country country;
  /** expiration date in Unix time. */
   private long expiryDate;
   private java.util.List<com.pipeclamp.test.Page> pages;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Passport() {}

  /**
   * All-args constructor.
   */
  public Passport(java.lang.String number, com.pipeclamp.test.Country country, java.lang.Long expiryDate, java.util.List<com.pipeclamp.test.Page> pages) {
    this.number = number;
    this.country = country;
    this.expiryDate = expiryDate;
    this.pages = pages;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return number;
    case 1: return country;
    case 2: return expiryDate;
    case 3: return pages;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: number = (java.lang.String)value$; break;
    case 1: country = (com.pipeclamp.test.Country)value$; break;
    case 2: expiryDate = (java.lang.Long)value$; break;
    case 3: pages = (java.util.List<com.pipeclamp.test.Page>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'number' field.
   * unique identifier   */
  public java.lang.String getNumber() {
    return number;
  }

  /**
   * Sets the value of the 'number' field.
   * unique identifier   * @param value the value to set.
   */
  public void setNumber(java.lang.String value) {
    this.number = value;
  }

  /**
   * Gets the value of the 'country' field.
   * issuing country   */
  public com.pipeclamp.test.Country getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * issuing country   * @param value the value to set.
   */
  public void setCountry(com.pipeclamp.test.Country value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'expiryDate' field.
   * expiration date in Unix time.   */
  public java.lang.Long getExpiryDate() {
    return expiryDate;
  }

  /**
   * Sets the value of the 'expiryDate' field.
   * expiration date in Unix time.   * @param value the value to set.
   */
  public void setExpiryDate(java.lang.Long value) {
    this.expiryDate = value;
  }

  /**
   * Gets the value of the 'pages' field.
   */
  public java.util.List<com.pipeclamp.test.Page> getPages() {
    return pages;
  }

  /**
   * Sets the value of the 'pages' field.
   * @param value the value to set.
   */
  public void setPages(java.util.List<com.pipeclamp.test.Page> value) {
    this.pages = value;
  }

  /** Creates a new Passport RecordBuilder */
  public static com.pipeclamp.test.Passport.Builder newBuilder() {
    return new com.pipeclamp.test.Passport.Builder();
  }
  
  /** Creates a new Passport RecordBuilder by copying an existing Builder */
  public static com.pipeclamp.test.Passport.Builder newBuilder(com.pipeclamp.test.Passport.Builder other) {
    return new com.pipeclamp.test.Passport.Builder(other);
  }
  
  /** Creates a new Passport RecordBuilder by copying an existing Passport instance */
  public static com.pipeclamp.test.Passport.Builder newBuilder(com.pipeclamp.test.Passport other) {
    return new com.pipeclamp.test.Passport.Builder(other);
  }
  
  /**
   * RecordBuilder for Passport instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Passport>
    implements org.apache.avro.data.RecordBuilder<Passport> {

    private java.lang.String number;
    private com.pipeclamp.test.Country country;
    private long expiryDate;
    private java.util.List<com.pipeclamp.test.Page> pages;

    /** Creates a new Builder */
    private Builder() {
      super(com.pipeclamp.test.Passport.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.pipeclamp.test.Passport.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.number)) {
        this.number = data().deepCopy(fields()[0].schema(), other.number);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.country)) {
        this.country = data().deepCopy(fields()[1].schema(), other.country);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.expiryDate)) {
        this.expiryDate = data().deepCopy(fields()[2].schema(), other.expiryDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.pages)) {
        this.pages = data().deepCopy(fields()[3].schema(), other.pages);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Passport instance */
    private Builder(com.pipeclamp.test.Passport other) {
            super(com.pipeclamp.test.Passport.SCHEMA$);
      if (isValidValue(fields()[0], other.number)) {
        this.number = data().deepCopy(fields()[0].schema(), other.number);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.country)) {
        this.country = data().deepCopy(fields()[1].schema(), other.country);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.expiryDate)) {
        this.expiryDate = data().deepCopy(fields()[2].schema(), other.expiryDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.pages)) {
        this.pages = data().deepCopy(fields()[3].schema(), other.pages);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'number' field */
    public java.lang.String getNumber() {
      return number;
    }
    
    /** Sets the value of the 'number' field */
    public com.pipeclamp.test.Passport.Builder setNumber(java.lang.String value) {
      validate(fields()[0], value);
      this.number = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'number' field has been set */
    public boolean hasNumber() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'number' field */
    public com.pipeclamp.test.Passport.Builder clearNumber() {
      number = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'country' field */
    public com.pipeclamp.test.Country getCountry() {
      return country;
    }
    
    /** Sets the value of the 'country' field */
    public com.pipeclamp.test.Passport.Builder setCountry(com.pipeclamp.test.Country value) {
      validate(fields()[1], value);
      this.country = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'country' field has been set */
    public boolean hasCountry() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'country' field */
    public com.pipeclamp.test.Passport.Builder clearCountry() {
      country = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'expiryDate' field */
    public java.lang.Long getExpiryDate() {
      return expiryDate;
    }
    
    /** Sets the value of the 'expiryDate' field */
    public com.pipeclamp.test.Passport.Builder setExpiryDate(long value) {
      validate(fields()[2], value);
      this.expiryDate = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'expiryDate' field has been set */
    public boolean hasExpiryDate() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'expiryDate' field */
    public com.pipeclamp.test.Passport.Builder clearExpiryDate() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'pages' field */
    public java.util.List<com.pipeclamp.test.Page> getPages() {
      return pages;
    }
    
    /** Sets the value of the 'pages' field */
    public com.pipeclamp.test.Passport.Builder setPages(java.util.List<com.pipeclamp.test.Page> value) {
      validate(fields()[3], value);
      this.pages = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'pages' field has been set */
    public boolean hasPages() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'pages' field */
    public com.pipeclamp.test.Passport.Builder clearPages() {
      pages = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Passport build() {
      try {
        Passport record = new Passport();
        record.number = fieldSetFlags()[0] ? this.number : (java.lang.String) defaultValue(fields()[0]);
        record.country = fieldSetFlags()[1] ? this.country : (com.pipeclamp.test.Country) defaultValue(fields()[1]);
        record.expiryDate = fieldSetFlags()[2] ? this.expiryDate : (java.lang.Long) defaultValue(fields()[2]);
        record.pages = fieldSetFlags()[3] ? this.pages : (java.util.List<com.pipeclamp.test.Page>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
