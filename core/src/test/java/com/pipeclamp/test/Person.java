/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.pipeclamp.test;  
@SuppressWarnings("all")
/** Common fields related to human beings */
@org.apache.avro.specific.AvroGenerated
public class Person extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Person\",\"namespace\":\"com.pipeclamp.test\",\"doc\":\"Common fields related to human beings\",\"fields\":[{\"name\":\"nicknames\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"constraints\":[{\"function\":\"size\",\"args\":[{\"name\":\"minItems\",\"value\":\"3\"}]}]},\"doc\":\"aliases used\",\"constraints\":[{\"function\":\"size\",\"args\":[{\"name\":\"min\",\"value\":\"2\"},{\"name\":\"max\",\"value\":\"4\"}]}]},{\"name\":\"passports\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"Passport\",\"doc\":\"A functional passport\",\"fields\":[{\"name\":\"number\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"unique identifier\",\"constraints\":[{\"function\":\"size\",\"args\":[{\"name\":\"min\",\"value\":\"1\"},{\"name\":\"max\",\"value\":\"3\"}]}]},{\"name\":\"country\",\"type\":{\"type\":\"enum\",\"name\":\"Country\",\"symbols\":[\"CAN\",\"USA\",\"MEX\",\"JAP\"]},\"doc\":\"issuing country\"},{\"name\":\"expiryDate\",\"type\":\"long\",\"doc\":\"expiration date in Unix time.\"},{\"name\":\"pages\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Page\",\"fields\":[{\"name\":\"index\",\"type\":\"int\",\"doc\":\"page number\",\"constraints\":[{\"function\":\"range\",\"args\":[{\"name\":\"min\",\"value\":\"1\"},{\"name\":\"max\",\"value\":\"100\"}]}]},{\"name\":\"contents\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"page contents\"}]}}}]},\"avro.java.string\":\"String\"},\"doc\":\"passports used\",\"constraints\":[{\"function\":\"size\",\"args\":[{\"name\":\"min\",\"value\":\"1\"},{\"name\":\"max\",\"value\":\"4\"}]},{\"function\":\"mapKeys\",\"args\":[{\"name\":\"keyType\",\"value\":\"string\"},{\"name\":\"constraintId\",\"value\":\"length\"},{\"name\":\"max\",\"value\":\"4\"}]}]},{\"name\":\"birthdate\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"deathdate\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"bellybuttons\",\"type\":\"int\",\"default\":1,\"metrics\":[{\"function\":\"average\",\"id\":\"bellybuttonAvg\",\"doc\":\"asdf asdf asdf\"}]},{\"name\":\"firstname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Person's first name\",\"constraints\":[{\"function\":\"length\",\"args\":[{\"name\":\"min\",\"value\":\"2\"},{\"name\":\"max\",\"value\":\"30\"}]}]},{\"name\":\"lastname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"\",\"constraints\":[{\"function\":\"length\",\"args\":[{\"name\":\"min\",\"value\":\"2\"},{\"name\":\"max\",\"value\":\"30\"}]}]},{\"name\":\"latitude\",\"type\":[\"null\",\"double\"],\"doc\":\"last known location (latitude)\",\"default\":null,\"constraints\":[{\"function\":\"range\",\"args\":[{\"name\":\"rangeId\",\"value\":\"geoLatitude\"}]}]},{\"name\":\"longitude\",\"type\":[\"null\",\"double\"],\"doc\":\"last known location (longitude)\",\"default\":null,\"constraints\":[{\"function\":\"range\",\"args\":[{\"name\":\"rangeId\",\"value\":\"geoLongitude\"}]}]},{\"name\":\"weight\",\"type\":\"float\",\"doc\":\"body weight\",\"constraints\":[{\"function\":\"range\",\"args\":[{\"name\":\"min\",\"value\":\"0.5\"},{\"name\":\"max\",\"value\":\"330.5\"}]}]},{\"name\":\"email\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"contact email address\",\"default\":null,\"constraints\":[{\"function\":\"regex\",\"args\":[{\"name\":\"patternId\",\"value\":\"emailAddress\"}]}]},{\"name\":\"bonesBroken\",\"type\":\"int\",\"doc\":\"Number of bones broken since birth\",\"default\":0,\"constraints\":[{\"function\":\"range\",\"args\":[{\"name\":\"min\",\"value\":\"0\"},{\"name\":\"max\",\"value\":\"100\"}]}]}],\"constraints\":[{\"function\":\"expression\",\"args\":[{\"name\":\"predicate\",\"value\":\"birthdate < deathdate\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** aliases used */
   private java.util.List<java.lang.String> nicknames;
  /** passports used */
   private java.util.Map<java.lang.String,com.pipeclamp.test.Passport> passports;
   private java.lang.Long birthdate;
   private java.lang.Long deathdate;
   private int bellybuttons;
  /** Person's first name */
   private java.lang.String firstname;
  /**  */
   private java.lang.String lastname;
  /** last known location (latitude) */
   private java.lang.Double latitude;
  /** last known location (longitude) */
   private java.lang.Double longitude;
  /** body weight */
   private float weight;
  /** contact email address */
   private java.lang.String email;
  /** Number of bones broken since birth */
   private int bonesBroken;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Person() {}

  /**
   * All-args constructor.
   */
  public Person(java.util.List<java.lang.String> nicknames, java.util.Map<java.lang.String,com.pipeclamp.test.Passport> passports, java.lang.Long birthdate, java.lang.Long deathdate, java.lang.Integer bellybuttons, java.lang.String firstname, java.lang.String lastname, java.lang.Double latitude, java.lang.Double longitude, java.lang.Float weight, java.lang.String email, java.lang.Integer bonesBroken) {
    this.nicknames = nicknames;
    this.passports = passports;
    this.birthdate = birthdate;
    this.deathdate = deathdate;
    this.bellybuttons = bellybuttons;
    this.firstname = firstname;
    this.lastname = lastname;
    this.latitude = latitude;
    this.longitude = longitude;
    this.weight = weight;
    this.email = email;
    this.bonesBroken = bonesBroken;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return nicknames;
    case 1: return passports;
    case 2: return birthdate;
    case 3: return deathdate;
    case 4: return bellybuttons;
    case 5: return firstname;
    case 6: return lastname;
    case 7: return latitude;
    case 8: return longitude;
    case 9: return weight;
    case 10: return email;
    case 11: return bonesBroken;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: nicknames = (java.util.List<java.lang.String>)value$; break;
    case 1: passports = (java.util.Map<java.lang.String,com.pipeclamp.test.Passport>)value$; break;
    case 2: birthdate = (java.lang.Long)value$; break;
    case 3: deathdate = (java.lang.Long)value$; break;
    case 4: bellybuttons = (java.lang.Integer)value$; break;
    case 5: firstname = (java.lang.String)value$; break;
    case 6: lastname = (java.lang.String)value$; break;
    case 7: latitude = (java.lang.Double)value$; break;
    case 8: longitude = (java.lang.Double)value$; break;
    case 9: weight = (java.lang.Float)value$; break;
    case 10: email = (java.lang.String)value$; break;
    case 11: bonesBroken = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'nicknames' field.
   * aliases used   */
  public java.util.List<java.lang.String> getNicknames() {
    return nicknames;
  }

  /**
   * Sets the value of the 'nicknames' field.
   * aliases used   * @param value the value to set.
   */
  public void setNicknames(java.util.List<java.lang.String> value) {
    this.nicknames = value;
  }

  /**
   * Gets the value of the 'passports' field.
   * passports used   */
  public java.util.Map<java.lang.String,com.pipeclamp.test.Passport> getPassports() {
    return passports;
  }

  /**
   * Sets the value of the 'passports' field.
   * passports used   * @param value the value to set.
   */
  public void setPassports(java.util.Map<java.lang.String,com.pipeclamp.test.Passport> value) {
    this.passports = value;
  }

  /**
   * Gets the value of the 'birthdate' field.
   */
  public java.lang.Long getBirthdate() {
    return birthdate;
  }

  /**
   * Sets the value of the 'birthdate' field.
   * @param value the value to set.
   */
  public void setBirthdate(java.lang.Long value) {
    this.birthdate = value;
  }

  /**
   * Gets the value of the 'deathdate' field.
   */
  public java.lang.Long getDeathdate() {
    return deathdate;
  }

  /**
   * Sets the value of the 'deathdate' field.
   * @param value the value to set.
   */
  public void setDeathdate(java.lang.Long value) {
    this.deathdate = value;
  }

  /**
   * Gets the value of the 'bellybuttons' field.
   */
  public java.lang.Integer getBellybuttons() {
    return bellybuttons;
  }

  /**
   * Sets the value of the 'bellybuttons' field.
   * @param value the value to set.
   */
  public void setBellybuttons(java.lang.Integer value) {
    this.bellybuttons = value;
  }

  /**
   * Gets the value of the 'firstname' field.
   * Person's first name   */
  public java.lang.String getFirstname() {
    return firstname;
  }

  /**
   * Sets the value of the 'firstname' field.
   * Person's first name   * @param value the value to set.
   */
  public void setFirstname(java.lang.String value) {
    this.firstname = value;
  }

  /**
   * Gets the value of the 'lastname' field.
   *    */
  public java.lang.String getLastname() {
    return lastname;
  }

  /**
   * Sets the value of the 'lastname' field.
   *    * @param value the value to set.
   */
  public void setLastname(java.lang.String value) {
    this.lastname = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * last known location (latitude)   */
  public java.lang.Double getLatitude() {
    return latitude;
  }

  /**
   * Sets the value of the 'latitude' field.
   * last known location (latitude)   * @param value the value to set.
   */
  public void setLatitude(java.lang.Double value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * last known location (longitude)   */
  public java.lang.Double getLongitude() {
    return longitude;
  }

  /**
   * Sets the value of the 'longitude' field.
   * last known location (longitude)   * @param value the value to set.
   */
  public void setLongitude(java.lang.Double value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'weight' field.
   * body weight   */
  public java.lang.Float getWeight() {
    return weight;
  }

  /**
   * Sets the value of the 'weight' field.
   * body weight   * @param value the value to set.
   */
  public void setWeight(java.lang.Float value) {
    this.weight = value;
  }

  /**
   * Gets the value of the 'email' field.
   * contact email address   */
  public java.lang.String getEmail() {
    return email;
  }

  /**
   * Sets the value of the 'email' field.
   * contact email address   * @param value the value to set.
   */
  public void setEmail(java.lang.String value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'bonesBroken' field.
   * Number of bones broken since birth   */
  public java.lang.Integer getBonesBroken() {
    return bonesBroken;
  }

  /**
   * Sets the value of the 'bonesBroken' field.
   * Number of bones broken since birth   * @param value the value to set.
   */
  public void setBonesBroken(java.lang.Integer value) {
    this.bonesBroken = value;
  }

  /** Creates a new Person RecordBuilder */
  public static com.pipeclamp.test.Person.Builder newBuilder() {
    return new com.pipeclamp.test.Person.Builder();
  }
  
  /** Creates a new Person RecordBuilder by copying an existing Builder */
  public static com.pipeclamp.test.Person.Builder newBuilder(com.pipeclamp.test.Person.Builder other) {
    return new com.pipeclamp.test.Person.Builder(other);
  }
  
  /** Creates a new Person RecordBuilder by copying an existing Person instance */
  public static com.pipeclamp.test.Person.Builder newBuilder(com.pipeclamp.test.Person other) {
    return new com.pipeclamp.test.Person.Builder(other);
  }
  
  /**
   * RecordBuilder for Person instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Person>
    implements org.apache.avro.data.RecordBuilder<Person> {

    private java.util.List<java.lang.String> nicknames;
    private java.util.Map<java.lang.String,com.pipeclamp.test.Passport> passports;
    private java.lang.Long birthdate;
    private java.lang.Long deathdate;
    private int bellybuttons;
    private java.lang.String firstname;
    private java.lang.String lastname;
    private java.lang.Double latitude;
    private java.lang.Double longitude;
    private float weight;
    private java.lang.String email;
    private int bonesBroken;

    /** Creates a new Builder */
    private Builder() {
      super(com.pipeclamp.test.Person.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.pipeclamp.test.Person.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.nicknames)) {
        this.nicknames = data().deepCopy(fields()[0].schema(), other.nicknames);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.passports)) {
        this.passports = data().deepCopy(fields()[1].schema(), other.passports);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.birthdate)) {
        this.birthdate = data().deepCopy(fields()[2].schema(), other.birthdate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.deathdate)) {
        this.deathdate = data().deepCopy(fields()[3].schema(), other.deathdate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.bellybuttons)) {
        this.bellybuttons = data().deepCopy(fields()[4].schema(), other.bellybuttons);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.firstname)) {
        this.firstname = data().deepCopy(fields()[5].schema(), other.firstname);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.lastname)) {
        this.lastname = data().deepCopy(fields()[6].schema(), other.lastname);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.latitude)) {
        this.latitude = data().deepCopy(fields()[7].schema(), other.latitude);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.longitude)) {
        this.longitude = data().deepCopy(fields()[8].schema(), other.longitude);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.weight)) {
        this.weight = data().deepCopy(fields()[9].schema(), other.weight);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.email)) {
        this.email = data().deepCopy(fields()[10].schema(), other.email);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.bonesBroken)) {
        this.bonesBroken = data().deepCopy(fields()[11].schema(), other.bonesBroken);
        fieldSetFlags()[11] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Person instance */
    private Builder(com.pipeclamp.test.Person other) {
            super(com.pipeclamp.test.Person.SCHEMA$);
      if (isValidValue(fields()[0], other.nicknames)) {
        this.nicknames = data().deepCopy(fields()[0].schema(), other.nicknames);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.passports)) {
        this.passports = data().deepCopy(fields()[1].schema(), other.passports);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.birthdate)) {
        this.birthdate = data().deepCopy(fields()[2].schema(), other.birthdate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.deathdate)) {
        this.deathdate = data().deepCopy(fields()[3].schema(), other.deathdate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.bellybuttons)) {
        this.bellybuttons = data().deepCopy(fields()[4].schema(), other.bellybuttons);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.firstname)) {
        this.firstname = data().deepCopy(fields()[5].schema(), other.firstname);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.lastname)) {
        this.lastname = data().deepCopy(fields()[6].schema(), other.lastname);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.latitude)) {
        this.latitude = data().deepCopy(fields()[7].schema(), other.latitude);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.longitude)) {
        this.longitude = data().deepCopy(fields()[8].schema(), other.longitude);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.weight)) {
        this.weight = data().deepCopy(fields()[9].schema(), other.weight);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.email)) {
        this.email = data().deepCopy(fields()[10].schema(), other.email);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.bonesBroken)) {
        this.bonesBroken = data().deepCopy(fields()[11].schema(), other.bonesBroken);
        fieldSetFlags()[11] = true;
      }
    }

    /** Gets the value of the 'nicknames' field */
    public java.util.List<java.lang.String> getNicknames() {
      return nicknames;
    }
    
    /** Sets the value of the 'nicknames' field */
    public com.pipeclamp.test.Person.Builder setNicknames(java.util.List<java.lang.String> value) {
      validate(fields()[0], value);
      this.nicknames = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'nicknames' field has been set */
    public boolean hasNicknames() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'nicknames' field */
    public com.pipeclamp.test.Person.Builder clearNicknames() {
      nicknames = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'passports' field */
    public java.util.Map<java.lang.String,com.pipeclamp.test.Passport> getPassports() {
      return passports;
    }
    
    /** Sets the value of the 'passports' field */
    public com.pipeclamp.test.Person.Builder setPassports(java.util.Map<java.lang.String,com.pipeclamp.test.Passport> value) {
      validate(fields()[1], value);
      this.passports = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'passports' field has been set */
    public boolean hasPassports() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'passports' field */
    public com.pipeclamp.test.Person.Builder clearPassports() {
      passports = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'birthdate' field */
    public java.lang.Long getBirthdate() {
      return birthdate;
    }
    
    /** Sets the value of the 'birthdate' field */
    public com.pipeclamp.test.Person.Builder setBirthdate(java.lang.Long value) {
      validate(fields()[2], value);
      this.birthdate = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'birthdate' field has been set */
    public boolean hasBirthdate() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'birthdate' field */
    public com.pipeclamp.test.Person.Builder clearBirthdate() {
      birthdate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'deathdate' field */
    public java.lang.Long getDeathdate() {
      return deathdate;
    }
    
    /** Sets the value of the 'deathdate' field */
    public com.pipeclamp.test.Person.Builder setDeathdate(java.lang.Long value) {
      validate(fields()[3], value);
      this.deathdate = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'deathdate' field has been set */
    public boolean hasDeathdate() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'deathdate' field */
    public com.pipeclamp.test.Person.Builder clearDeathdate() {
      deathdate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'bellybuttons' field */
    public java.lang.Integer getBellybuttons() {
      return bellybuttons;
    }
    
    /** Sets the value of the 'bellybuttons' field */
    public com.pipeclamp.test.Person.Builder setBellybuttons(int value) {
      validate(fields()[4], value);
      this.bellybuttons = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'bellybuttons' field has been set */
    public boolean hasBellybuttons() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'bellybuttons' field */
    public com.pipeclamp.test.Person.Builder clearBellybuttons() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'firstname' field */
    public java.lang.String getFirstname() {
      return firstname;
    }
    
    /** Sets the value of the 'firstname' field */
    public com.pipeclamp.test.Person.Builder setFirstname(java.lang.String value) {
      validate(fields()[5], value);
      this.firstname = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'firstname' field has been set */
    public boolean hasFirstname() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'firstname' field */
    public com.pipeclamp.test.Person.Builder clearFirstname() {
      firstname = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'lastname' field */
    public java.lang.String getLastname() {
      return lastname;
    }
    
    /** Sets the value of the 'lastname' field */
    public com.pipeclamp.test.Person.Builder setLastname(java.lang.String value) {
      validate(fields()[6], value);
      this.lastname = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'lastname' field has been set */
    public boolean hasLastname() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'lastname' field */
    public com.pipeclamp.test.Person.Builder clearLastname() {
      lastname = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'latitude' field */
    public java.lang.Double getLatitude() {
      return latitude;
    }
    
    /** Sets the value of the 'latitude' field */
    public com.pipeclamp.test.Person.Builder setLatitude(java.lang.Double value) {
      validate(fields()[7], value);
      this.latitude = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'latitude' field has been set */
    public boolean hasLatitude() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'latitude' field */
    public com.pipeclamp.test.Person.Builder clearLatitude() {
      latitude = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'longitude' field */
    public java.lang.Double getLongitude() {
      return longitude;
    }
    
    /** Sets the value of the 'longitude' field */
    public com.pipeclamp.test.Person.Builder setLongitude(java.lang.Double value) {
      validate(fields()[8], value);
      this.longitude = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'longitude' field has been set */
    public boolean hasLongitude() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'longitude' field */
    public com.pipeclamp.test.Person.Builder clearLongitude() {
      longitude = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'weight' field */
    public java.lang.Float getWeight() {
      return weight;
    }
    
    /** Sets the value of the 'weight' field */
    public com.pipeclamp.test.Person.Builder setWeight(float value) {
      validate(fields()[9], value);
      this.weight = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'weight' field has been set */
    public boolean hasWeight() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'weight' field */
    public com.pipeclamp.test.Person.Builder clearWeight() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'email' field */
    public java.lang.String getEmail() {
      return email;
    }
    
    /** Sets the value of the 'email' field */
    public com.pipeclamp.test.Person.Builder setEmail(java.lang.String value) {
      validate(fields()[10], value);
      this.email = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'email' field has been set */
    public boolean hasEmail() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'email' field */
    public com.pipeclamp.test.Person.Builder clearEmail() {
      email = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'bonesBroken' field */
    public java.lang.Integer getBonesBroken() {
      return bonesBroken;
    }
    
    /** Sets the value of the 'bonesBroken' field */
    public com.pipeclamp.test.Person.Builder setBonesBroken(int value) {
      validate(fields()[11], value);
      this.bonesBroken = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'bonesBroken' field has been set */
    public boolean hasBonesBroken() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'bonesBroken' field */
    public com.pipeclamp.test.Person.Builder clearBonesBroken() {
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    public Person build() {
      try {
        Person record = new Person();
        record.nicknames = fieldSetFlags()[0] ? this.nicknames : (java.util.List<java.lang.String>) defaultValue(fields()[0]);
        record.passports = fieldSetFlags()[1] ? this.passports : (java.util.Map<java.lang.String,com.pipeclamp.test.Passport>) defaultValue(fields()[1]);
        record.birthdate = fieldSetFlags()[2] ? this.birthdate : (java.lang.Long) defaultValue(fields()[2]);
        record.deathdate = fieldSetFlags()[3] ? this.deathdate : (java.lang.Long) defaultValue(fields()[3]);
        record.bellybuttons = fieldSetFlags()[4] ? this.bellybuttons : (java.lang.Integer) defaultValue(fields()[4]);
        record.firstname = fieldSetFlags()[5] ? this.firstname : (java.lang.String) defaultValue(fields()[5]);
        record.lastname = fieldSetFlags()[6] ? this.lastname : (java.lang.String) defaultValue(fields()[6]);
        record.latitude = fieldSetFlags()[7] ? this.latitude : (java.lang.Double) defaultValue(fields()[7]);
        record.longitude = fieldSetFlags()[8] ? this.longitude : (java.lang.Double) defaultValue(fields()[8]);
        record.weight = fieldSetFlags()[9] ? this.weight : (java.lang.Float) defaultValue(fields()[9]);
        record.email = fieldSetFlags()[10] ? this.email : (java.lang.String) defaultValue(fields()[10]);
        record.bonesBroken = fieldSetFlags()[11] ? this.bonesBroken : (java.lang.Integer) defaultValue(fields()[11]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
