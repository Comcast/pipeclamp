/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.pipeclamp.test;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Page extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Page\",\"namespace\":\"com.pipeclamp.test\",\"fields\":[{\"name\":\"index\",\"type\":\"int\",\"doc\":\"page number\",\"constraints\":[{\"function\":\"range\",\"args\":[{\"name\":\"min\",\"value\":\"1\"},{\"name\":\"max\",\"value\":\"100\"}]}]},{\"name\":\"contents\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"page contents\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** page number */
   private int index;
  /** page contents */
   private java.lang.String contents;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Page() {}

  /**
   * All-args constructor.
   */
  public Page(java.lang.Integer index, java.lang.String contents) {
    this.index = index;
    this.contents = contents;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return index;
    case 1: return contents;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: index = (java.lang.Integer)value$; break;
    case 1: contents = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'index' field.
   * page number   */
  public java.lang.Integer getIndex() {
    return index;
  }

  /**
   * Sets the value of the 'index' field.
   * page number   * @param value the value to set.
   */
  public void setIndex(java.lang.Integer value) {
    this.index = value;
  }

  /**
   * Gets the value of the 'contents' field.
   * page contents   */
  public java.lang.String getContents() {
    return contents;
  }

  /**
   * Sets the value of the 'contents' field.
   * page contents   * @param value the value to set.
   */
  public void setContents(java.lang.String value) {
    this.contents = value;
  }

  /** Creates a new Page RecordBuilder */
  public static com.pipeclamp.test.Page.Builder newBuilder() {
    return new com.pipeclamp.test.Page.Builder();
  }
  
  /** Creates a new Page RecordBuilder by copying an existing Builder */
  public static com.pipeclamp.test.Page.Builder newBuilder(com.pipeclamp.test.Page.Builder other) {
    return new com.pipeclamp.test.Page.Builder(other);
  }
  
  /** Creates a new Page RecordBuilder by copying an existing Page instance */
  public static com.pipeclamp.test.Page.Builder newBuilder(com.pipeclamp.test.Page other) {
    return new com.pipeclamp.test.Page.Builder(other);
  }
  
  /**
   * RecordBuilder for Page instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Page>
    implements org.apache.avro.data.RecordBuilder<Page> {

    private int index;
    private java.lang.String contents;

    /** Creates a new Builder */
    private Builder() {
      super(com.pipeclamp.test.Page.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.pipeclamp.test.Page.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.index)) {
        this.index = data().deepCopy(fields()[0].schema(), other.index);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.contents)) {
        this.contents = data().deepCopy(fields()[1].schema(), other.contents);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Page instance */
    private Builder(com.pipeclamp.test.Page other) {
            super(com.pipeclamp.test.Page.SCHEMA$);
      if (isValidValue(fields()[0], other.index)) {
        this.index = data().deepCopy(fields()[0].schema(), other.index);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.contents)) {
        this.contents = data().deepCopy(fields()[1].schema(), other.contents);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'index' field */
    public java.lang.Integer getIndex() {
      return index;
    }
    
    /** Sets the value of the 'index' field */
    public com.pipeclamp.test.Page.Builder setIndex(int value) {
      validate(fields()[0], value);
      this.index = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'index' field has been set */
    public boolean hasIndex() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'index' field */
    public com.pipeclamp.test.Page.Builder clearIndex() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'contents' field */
    public java.lang.String getContents() {
      return contents;
    }
    
    /** Sets the value of the 'contents' field */
    public com.pipeclamp.test.Page.Builder setContents(java.lang.String value) {
      validate(fields()[1], value);
      this.contents = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'contents' field has been set */
    public boolean hasContents() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'contents' field */
    public com.pipeclamp.test.Page.Builder clearContents() {
      contents = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Page build() {
      try {
        Page record = new Page();
        record.index = fieldSetFlags()[0] ? this.index : (java.lang.Integer) defaultValue(fields()[0]);
        record.contents = fieldSetFlags()[1] ? this.contents : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
