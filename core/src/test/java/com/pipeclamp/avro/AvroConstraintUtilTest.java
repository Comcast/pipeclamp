package com.pipeclamp.avro;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.Collection;
import java.util.Map;

import org.apache.avro.Schema;
import org.apache.avro.generic.GenericRecord;
import org.testng.annotations.Test;

import com.pipeclamp.api.Constraint;
import com.pipeclamp.api.Violation;
import com.pipeclamp.constraints.AbstractConstraintTest;
import com.pipeclamp.constraints.AbstractValueConstraint;
import com.pipeclamp.path.Path;

public class AvroConstraintUtilTest {

	@Test
	public void constraintsIn() {

		byte[] schemaBytes = AbstractConstraintTest.readResource("person.avsc");
		Schema sc = AvroUtil.parseSchema(new String(schemaBytes));

		Map<Path<GenericRecord, ?>, Collection<Constraint<?>>> constraints = AvroConstraintUtil.constraintsIn(sc, true, AvroConfiguration.ConstraintFactory);
		assertEquals(10, constraints.size());
	}

	@Test
	public void constraintsIn2() {

		byte[] schemaBytes = AbstractConstraintTest.readResource("GoodBadMix.avsc");
		Schema sc = AvroUtil.parseSchema(new String(schemaBytes));

		Map<Path<GenericRecord, ?>, Collection<Constraint<?>>> constraints = AvroConstraintUtil.constraintsIn(sc, true, AvroConfiguration.ConstraintFactory);
		assertEquals(3, constraints.size());
	}

	/**
	 * Mock up a record that emulates one that would be generated by the schema.
	 *
	 * @param schema
	 * @param namePicked
	 * @param receiverId
	 * @param deviceId
	 * @return
	 */
	private static GenericRecord createWith(final Schema schema, final String namePicked, final String receiverId, final String deviceId) {

		return new GenericRecord() {
			public void put(int i, Object v) { }
			public Object get(int i) { return null; }
			public Schema getSchema() { return schema; }
			public void put(String key, Object v) { }
			public Object get(String key) {
				if (key.equals("namepickedbyvalidator")) return namePicked;
				if (key.equals("device")) return new GenericRecord() {
					public void put(int i, Object v) { }
					public Object get(int i) { return null; }
					public Schema getSchema() { return schema; }
					public void put(String key, Object v) { }
					public Object get(String key) { 
						if (key.equals("receiverId")) return receiverId;
						if (key.equals("deviceId")) return deviceId;
						return null; 
					}
				};
				return null;
			}
		};
	}

	/**
	 * All fields in the schema provided can have null fields per union types. 
	 * Test whether one of our constraints can prevent that.
	 */
	@Test
	public void testExplicitNullDisallowance() {

		byte[] schemaBytes = AbstractConstraintTest.readResource("GoodBadMix.avsc");
		final Schema schema = AvroUtil.parseSchema(new String(schemaBytes));

		AvroValidator validator = new AvroValidator(schema, false);
		
		GenericRecord withOneNull = createWith(schema, "nothingIsOk", null, "1234567890");	// missing recId
		Map<Path<GenericRecord, ?>, Collection<Violation>> allViolations = validator.validate(withOneNull);
		
		assertEquals(allViolations.size(), 1);	// just one field had any errors
		Collection<Violation> fieldViolations = allViolations.values().iterator().next();
		assertEquals(fieldViolations.size(), 1);
		
		Violation violation = fieldViolations.iterator().next();
		assertEquals(violation.message, AbstractValueConstraint.MissingValueMessage);
		
		GenericRecord withNoNulls = createWith(schema, "nothingIsOk", "1", "1234567890");	// recId too short
		allViolations = validator.validate(withNoNulls);
		
		assertEquals(allViolations.size(), 1);	// just one field had any errors
		fieldViolations = allViolations.values().iterator().next();
		assertEquals(fieldViolations.size(), 1);
		
		violation = fieldViolations.iterator().next();
		assertTrue(violation.message.contains("is too short"));
	}
}
